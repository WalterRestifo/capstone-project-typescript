import Head from "next/head";
import Header from "../components/Header";
import styled from "styled-components";
import Link from "next/link";
import MiniCard from "../components/MiniCard";
import { useEffect, useState } from "react";
import { MiniPlayer, Team } from "../interfaces/interfaces";
import updateTeam from "../utils/updateTeam";

export default function ScoreForm(): JSX.Element {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [team1, setTeam1] = useState<Team>({
    players: [],
    points: 0,
    wins: 0,
    games: 0,
    id: "",
  });
  const [team2, setTeam2] = useState<Team>({
    players: [],
    points: 0,
    wins: 0,
    games: 0,
    id: "",
  });

  useEffect(() => {
    if (typeof window !== "undefined") {
      const team1FromLocalStorage = localStorage.getItem("team1");
      if (team1FromLocalStorage) {
        setTeam1(JSON.parse(team1FromLocalStorage));
      }

      const team2FromLocalStorage = localStorage.getItem("team2");
      if (team2FromLocalStorage) {
        setTeam2(JSON.parse(team2FromLocalStorage));
      }
    }
  }, []);

  async function handleSubmit(event: any) {
    event.preventDefault();
    const form = event.currentTarget;
    const pointsTeam1 = parseInt(form.elements.pointsTeam1.value);
    const pointsTeam2 = parseInt(form.elements.pointsTeam2.value);
    setIsSubmitted(true);
    const team1Obj = team1;
    const team2Obj = team2;
    let winner = "";
    if (pointsTeam1 > pointsTeam2) {
      team1Obj.wins += 1;
      winner = "Team 1";
    } else if (pointsTeam1 < pointsTeam2) {
      team2Obj.wins += 1;
      winner = "Team 2";
    } else {
      return alert("Please enter a valid score");
    }
    team1Obj.games += 1;
    team2Obj.games += 1;
    team1Obj.points += pointsTeam1;
    team2Obj.points += pointsTeam2;

    async function postMatch(match: object) {
      try {
        await fetch("/api/matches", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(match),
        });
      } catch (error) {
        console.error(
          "Something went wrong with the post fetch of a matches in /scoreForm: ",
          error
        );
      }
    }
    postMatch({ team1: team1Obj, team2: team2Obj, winner: winner });

    async function updateTeams() {
      updateTeam(team1Obj);
      updateTeam(team2Obj);
    }
    updateTeams();
  }

  return (
    <StyledDiv>
      <Head>
        <title>MatchBall</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header teaser={"Scores"} />
      <StyledForm onSubmit={handleSubmit} data-cy="scoreForm">
        <StyledFormDiv>
          <div data-cy="team-1-wrapper">
            <StyledP>Team 1</StyledP>
            {team1 &&
              team1.players.length > 0 &&
              team1.players.map((player: MiniPlayer) => {
                return (
                  <MiniCard
                    key={player.name + player.cloudinarySrc}
                    name={player.name}
                    cloudinarySrc={player.cloudinarySrc}
                  />
                );
              })}

            <label htmlFor="pointsTeam1">Points: </label>
            <StyledInput
              type="number"
              name="pointsTeam1"
              id="pointsTeam1"
              data-cy="team-1-score-input"
              maxLength={2}
              aria-label="points for Team 1"
            />
          </div>

          <p>VS</p>

          <div data-cy="team-2-wrapper">
            <StyledP>Team 2</StyledP>
            {team2 &&
              team2.players.map((player: MiniPlayer) => {
                return (
                  <MiniCard
                    key={player.name + player.cloudinarySrc}
                    name={player.name}
                    cloudinarySrc={player.cloudinarySrc}
                  />
                );
              })}
            <label htmlFor="pointsTeam2">Points: </label>
            <StyledInput
              type="number"
              name="pointsTeam2"
              id="pointsTeam2"
              data-cy="team-2-score-input"
              maxLength={2}
              aria-label="points for Team 2"
            />
          </div>
        </StyledFormDiv>
        {!isSubmitted && (
          <button type="submit" data-cy="submit-scoreForm">
            save
          </button>
        )}
        <button>
          <Link href={"/games"} data-cy="back-to-games-page-navigation">
            back
          </Link>
        </button>
      </StyledForm>
    </StyledDiv>
  );
}

const StyledDiv = styled.div`
  height: 100vh;
  display: grid;
  grid-template-rows: 7rem auto;
  padding: 0;
`;

const StyledForm = styled.form`
  border: 1px solid #eaeaea;
  margin-left: 2rem;
  margin-right: 2rem;
`;

const StyledFormDiv = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  border: 1px solid #eaeaea;
`;

const StyledP = styled.p`
  text-align: center;
`;

const StyledInput = styled.input`
  width: 2rem;
  height: 2rem;
`;
