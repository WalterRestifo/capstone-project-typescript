import Head from "next/head";
import Header from "../components/Header";
import Navigation from "../components/Navigation";
import styled from "styled-components";
import Link from "next/link";
import { Team } from "../interfaces/interfaces";
import { useEffect, useState } from "react";
import TeamComponent from "../components/TeamComponent";
import updateTeam from "../utils/updateTeam";

export default function Games(): JSX.Element {
  const [matches, setMatches] = useState([]);

  useEffect(() => {
    const matchesFromLocalStorage = localStorage.getItem("matches");
    if (matchesFromLocalStorage) {
      setMatches(JSON.parse(matchesFromLocalStorage));
    }
  }, []);

  useEffect(() => {
    const team1WithLastGamePoints = localStorage.getItem(
      "team1WithLastGamePoints"
    );
    const team2WithLastGamePoints = localStorage.getItem(
      "team2WithLastGamePoints"
    );
    if (team1WithLastGamePoints && team2WithLastGamePoints) {
      const team1Obj = JSON.parse(team1WithLastGamePoints);
      const team2Obj = JSON.parse(team2WithLastGamePoints);
      team1Obj.lastGamePoints = parseInt(team1Obj.lastGamePoints);
      team2Obj.lastGamePoints = parseInt(team2Obj.lastGamePoints);

      if (team1Obj.lastGamePoints > team2Obj.lastGamePoints) {
        team1Obj.wins += 1;
      } else {
        team2Obj.wins += 1;
      }
      team1Obj.games += 1;
      team2Obj.games += 1;
      team1Obj.points += parseInt(team1Obj.lastGamePoints);
      team2Obj.points += parseInt(team2Obj.lastGamePoints);

      updateTeam(team1Obj);
      updateTeam(team2Obj);

      const jsonMatchesFromLocalStorage = localStorage.getItem("matches");
      if (jsonMatchesFromLocalStorage) {
        const matchesFromLocalStorage = JSON.parse(jsonMatchesFromLocalStorage);
        console.log(
          "matches wurde im localstorage gefunden: ",
          matchesFromLocalStorage
        );

        const updatedMatches = [
          ...matchesFromLocalStorage,
          {
            teams: [team1Obj, team2Obj],
            matchId: matchesFromLocalStorage.length + 1,
          },
        ];
        localStorage.setItem("matches", JSON.stringify(updatedMatches));
        setMatches(updatedMatches);
      } else {
        console.log("matches wurde im localstorage nicht gefunden ");
        localStorage.setItem(
          "matches",
          JSON.stringify([{ teams: [team1Obj, team2Obj], matchId: 1 }])
        );
        setMatches([{ teams: [team1Obj, team2Obj], matchId: 1 }]);
      }
    }
  }, []);

  function handleDelete() {
    setMatches([]);
  }

  function handleEmptyLocalStorage() {
    localStorage.removeItem("team1");
    localStorage.removeItem("team2");
    localStorage.removeItem("team1WithLastGamePoints");
    localStorage.removeItem("team2WithLastGamePoints");
  }

  // function handleDeleteMatches() {
  //   delete all matches from the databank

  // }

  return (
    <StyledDiv>
      <Head>
        <title>MatchBall</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header teaser={"Games"} />
      <section>
        {matches &&
          matches.map((match: []) => {
            return (
              <div key={match.matchId}>
                <p>{match.matchId}</p>
                {match.teams.map((team: Team) => {
                  return (
                    <TeamComponent
                      team={team}
                      key={team.id}
                      isClickable={false}
                    />
                  );
                })}
              </div>
            );
          })}
      </section>
      <section>
        <button onClick={handleEmptyLocalStorage}>
          <Link href={"/teamChoice"}>Add a new game</Link>
        </button>
        <button onClick={handleDelete}>Delete all games</button>
      </section>
      <Navigation />
    </StyledDiv>
  );
}

const StyledDiv = styled.div`
  height: 100vh;
  display: grid;
  grid-template-rows: 7rem auto 4rem;
  padding: 0;
`;

const StyledTeam = styled.div`
  border: 1px solid white;
  display: flex;
  flex-wrap: wrap;
`;
